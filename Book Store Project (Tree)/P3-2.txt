#include <stdlib.h>
#include <stdio.h>
#include <strings.h>
//Original code provided by the author Mark Allen Wiess.
//Modified by Dr. Radi Jarrar
typedef struct AVLnode *AVLNode;

struct AVLnode
{
    char bookName[30];
    char autherName[30];
    int publishingDate;
    char publishingAddress[30];
    char category[15];
    AVLNode Left;
    AVLNode Right;
    int Height; //Balance information
};

AVLNode MakeEmpty( AVLNode T )
{
    if( T != NULL )
    {
        MakeEmpty( T->Left );
        MakeEmpty( T->Right );
        free( T );
    }
    return NULL;
}


AVLNode FindMin( AVLNode T )
{
    if( T != NULL )
        while( T->Left != NULL )
            T = T->Left;

    return T;
}

AVLNode FindMax( AVLNode T )
{
    if( T != NULL )
        while( T->Right != NULL )
            T = T->Right;

    return T;
}
/* START: fig4_36.txt */
int Height( AVLNode P )
{
    if( P == NULL )
        return -1;
    else
        return P->Height;
}
/* END */

int Max( int Lhs, int Rhs )
{
    return Lhs > Rhs ? Lhs : Rhs;
}

/* START: fig4_39.txt */
/* This function can be called only if K2 has a left child */
/* Perform a rotate between a node (K2) and its left child */
/* Update heights, then return new root */

AVLNode SingleRotateWithLeft( AVLNode K2 )
{
    AVLNode  K1;

    K1 = K2->Left;
    K2->Left = K1->Right;
    K1->Right = K2;

    K2->Height = Max( Height( K2->Left ), Height( K2->Right ) ) + 1;
    K1->Height = Max( Height( K1->Left ), K2->Height ) + 1;

    return K1;  /* New root */
}


/* This function can be called only if K1 has a right child */
/* Perform a rotate between a node (K1) and its right child */
/* Update heights, then return new root */

AVLNode SingleRotateWithRight( AVLNode K1 )
{
    AVLNode K2;

    K2 = K1->Right;
    K1->Right = K2->Left;
    K2->Left = K1;

    K1->Height = Max( Height( K1->Left ), Height( K1->Right ) ) + 1;
    K2->Height = Max( Height( K2->Right ), K1->Height ) + 1;

    return K2;  /* New root */
}

/* START: fig4_41.txt */
/* This function can be called only if K3 has a left */
/* child and K3's left child has a right child */
/* Do the left-right double rotation */
/* Update heights, then return new root */

AVLNode DoubleRotateWithLeft( AVLNode K3 )
{
    /* Rotate between K1 and K2 */
    K3->Left = SingleRotateWithRight( K3->Left );

    /* Rotate between K3 and K2 */
    return SingleRotateWithLeft( K3 );
}
/* END */

/* This function can be called only if K1 has a right */
/* child and K1's right child has a left child */
/* Do the right-left double rotation */
/* Update heights, then return new root */

AVLNode DoubleRotateWithRight( AVLNode K1 )
{
    /* Rotate between K3 and K2 */
    K1->Right = SingleRotateWithLeft( K1->Right );

    /* Rotate between K1 and K2 */
    return SingleRotateWithRight( K1 );
}
AVLNode FindUsingBookName( char data[30], AVLNode T )
{
    if( T == NULL )
        return NULL;
    if( strcmp(data,T->bookName) < 0 )
    {
        return FindUsingBookName( data, T->Left );
    }
    else if( strcmp(data,T->bookName) > 0 )
    {
        return FindUsingBookName( data, T->Right );
    }
    else
        return T;
}
//There is a problem in the key value when the tree foes to another node it depend on the book name as key
AVLNode FindUsingAuthorName( char data[30], AVLNode T )
{
    AVLNode authorTree=MakeEmpty(NULL);
    char bookInformation[120],date[5];
    printf("%s\n",data);
    if( T == NULL )
        return NULL;
        if( strcmp(data,T->autherName) < 0 )
        {
            printf("**%s\n",T->autherName);
            return FindUsingAuthorName( data, T->Left );
        }
        else if( strcmp(data,T->autherName) > 0 )
        {
            printf("++%s\n",T->autherName);
            return FindUsingAuthorName( data, T->Right );
        }
        else
        {
            /*strcpy(bookInformation,strcat(T->bookName,"|"));
            strcat(bookInformation,strcat(T->autherName,"|"));
            sprintf(date,"%d", T->publishingDate );
            strcat(bookInformation,strcat(date,"|"));
            strcat(bookInformation,strcat(T->publishingAddress,"|"));
            strcat(bookInformation,strcat(T->category,"\n"));
            printf("%s\n",bookInformation);*/
            return T;
           // authorTree=Insert(bookInformation,authorTree);
        }

}
AVLNode Insert( char data[120], AVLNode T , int x)
{

    char key[30],tempData[120];
    if(x==1){
     strcpy(tempData,data);
    strcpy(key,strtok(data,"|"));
     if( T == NULL )
    {
        /* Create and return a one-node tree */
        T =(AVLNode)malloc( sizeof( struct AVLnode ) );

        if( T == NULL )
            printf( "Out of space!!!" );
        else
        {
            strcpy(T->bookName,strtok(tempData,"|"));
            strcpy(T->autherName,strtok(NULL,"|"));
            T->publishingDate=atoi(strtok(NULL,"|"));
            strcpy(T->publishingAddress,strtok(NULL,"|"));
            strcpy(T->category,strtok(NULL,"|"));
            T->Height = 0;
            T->Left = T->Right = NULL;
        }
    }
    else if( strcmp(key,T->bookName) < 0 )
    {
        T->Left = Insert( tempData, T->Left,x );
        if( Height( T->Left ) - Height( T->Right ) == 2 )
            if(strcmp(key,T->Left->bookName) < 0 )
                T = SingleRotateWithLeft( T );
            else
                T = DoubleRotateWithLeft( T );
    }
    else if( strcmp(key,T->bookName) > 0 )
    {
        T->Right = Insert( tempData, T->Right ,x);
        if( Height( T->Right ) - Height( T->Left ) == 2 )
            if( strcmp(key,T->Right->bookName) > 0  )
                T = SingleRotateWithRight( T );
            else
                T = DoubleRotateWithRight( T );
    }
    /* Else X is in the tree already; we'll do nothing */

    T->Height = Max( Height( T->Left ), Height( T->Right ) ) + 1;
    return T;
    }else{
    strcpy(tempData,data);
    strtok(data,"|");
    strcpy(key,strtok(NULL,"|"));

    if( T == NULL )
    {
        /* Create and return a one-node tree */
        T =(AVLNode)malloc( sizeof( struct AVLnode ) );

        if( T == NULL )
            printf( "Out of space!!!" );
        else
        {
            strcpy(T->bookName,strtok(tempData,"|"));
            strcpy(T->autherName,strtok(NULL,"|"));
            T->publishingDate=atoi(strtok(NULL,"|"));
            strcpy(T->publishingAddress,strtok(NULL,"|"));
            strcpy(T->category,strtok(NULL,"|"));
            T->Height = 0;
            T->Left = T->Right = NULL;
        }
    }
    else if( strcmp(key,T->autherName) < 0 )
    {
        T->Left = Insert( tempData, T->Left,x );
        if( Height( T->Left ) - Height( T->Right ) == 2 )
            if(strcmp(key,T->Left->autherName) < 0 )
                T = SingleRotateWithLeft( T );
            else
                T = DoubleRotateWithLeft( T );
    }
    else if( strcmp(key,T->autherName) > 0 )
    {
        T->Right = Insert( tempData, T->Right ,x);
        if( Height( T->Right ) - Height( T->Left ) == 2 )
            if( strcmp(key,T->Right->autherName) > 0  )
                T = SingleRotateWithRight( T );
            else
                T = DoubleRotateWithRight( T );
    }
    /* Else X is in the tree already; we'll do nothing */

    T->Height = Max( Height( T->Left ), Height( T->Right ) ) + 1;
    return T;
    }


}
/* END */
/* END */

//in-order print to see the elements
void PrintInOrder( AVLNode t)
{
    if( t != NULL)
    {
        PrintInOrder( t->Left );
        printf("%s \t %s \t %d \t %s \t %s\n", t->bookName,t->autherName,t->publishingDate,t->publishingAddress,t->category);
        PrintInOrder( t->Right );
    }
}


/* END */

//in-order print to see the elements
void saveInFile( AVLNode t,FILE*inp)
{
    if( t != NULL)
    {
        saveInFile( t->Left,inp );
        fprintf(inp,"%s \t %s \t %d \t %s \t %s\n", t->bookName,t->autherName,t->publishingDate,t->publishingAddress,t->category);
        saveInFile( t->Right,inp );
    }
}

AVLNode readBooksInformation(AVLNode tree, int x)
{

    FILE*file;
    file=fopen("books.txt","r");
    char tempVariableData [120];//temporary variable contain the data from shares file
    while(fgets(tempVariableData,120,file)!=NULL)
    {
        //stop iteration when arrive the end of file
        tree= Insert(tempVariableData,tree,x);//insert the element into the liked list

    }
    return tree;
}

AVLNode InsertNewBook(AVLNode tree)
{
    char bookName[30],authorName[30],publishAddress[30],category[15], publishDate[6], temp, data[120];
    printf("Book name : ");
    scanf("%[^\n]",&temp);
    scanf("%s",bookName);
    printf("Author's name : ");
    scanf("%[^\n]",&temp);
    scanf("%s",authorName);
    printf("Publishing year : ");
    scanf("%[^\n]",&temp);
    scanf("%s",publishDate);
    printf("Publishing address : ");
    scanf("%[^\n]",&temp);
    scanf("%s",publishAddress);
    printf("Category : ");
    scanf("%s",category);
    strcpy(data,strcat(bookName,"|"));
    strcat(data,strcat(authorName,"|"));
    strcat(data,strcat(publishDate,"|"));
    strcat(data,strcat(publishAddress,"|"));
    strcat(data,strcat(category,"\n"));
    tree=Insert(data,tree,1);
    return tree;

}
//********************************************************************************************************************************************************
void  searchForBook( AVLNode tree)
{
    int choice;
    char nameFromUser [30];
    char tempChar;
    AVLNode searchingResult,authorKey=MakeEmpty(NULL);
    printf("Chose search method :\n");
    printf("1- Using book name\n");
    printf("2- Using author name \n");
    scanf("%d",&choice);
    if(choice==1)
    {
        printf("Enter book name : ");
        scanf("%c",&tempChar);//temporary variable help to take name of company if it's consist space
        scanf("%[^\n]",nameFromUser);
        searchingResult = FindUsingBookName(nameFromUser,tree);
    }
    else if(choice==2)
    {
        authorKey=readBooksInformation(authorKey,2);
        printInOrder(authorKey);
        printf("Enter author name\n");
        scanf("%c",&tempChar);//temporary variable help to take name of company if it's consist space
        scanf("%[^\n]",nameFromUser);
        searchingResult = FindUsingAuthorName(nameFromUser,authorKey);
    }
    else
    {
        printf("Error in choosing !! unknown input try again \n");
    }
    if(searchingResult==NULL)
        printf("The book that you want is not currently available in the library\n");
    else if (choice==1)
    {
                printf("%s\t%s\t%d\t%s\t%s\n",searchingResult->bookName,searchingResult->autherName,searchingResult->publishingDate,searchingResult->publishingAddress,searchingResult->category);

    }else
                    printf("%s\t%s\t%d\t%s\t%s\n",searchingResult->bookName,searchingResult->autherName,searchingResult->publishingDate,searchingResult->publishingAddress,searchingResult->category);
      //  printInOrder(searchingResult);

}

AVLNode updateOrDelete(char data[30],AVLNode tree)
{
    AVLNode tempCell;
    if(tree==NULL)
        printf("There's no identical !! Element not found \n");
    else if( strcmp(data,tree->bookName) < 0 )
        tree->Left= updateOrDelete(data,tree->Left);
    else if( strcmp(data,tree->bookName) > 0 )
        tree->Right= updateOrDelete(data,tree->Right);
    else if(tree->Left && tree->Right)
    {
        tempCell=FindMin(tree->Right);
        strcpy(tree->bookName,tempCell->bookName);
        strcpy(tree->autherName,tempCell->autherName);
        tree->publishingDate=tempCell->publishingDate;
        strcpy(tree->publishingAddress,tempCell->publishingAddress);
        strcpy(tree->category,tempCell->category);
        tree->Right=updateOrDelete(tree->bookName,tree->Right);

    }
    else
    {
        tempCell=tree;
        if(tree->Left==NULL)
            tree=tree->Right;
        else if(tree->Right==NULL)
            tree=tree->Left;
        free(tempCell);
    }
    return tree;
}

void printInOrder( AVLNode t)
{
    if( t != NULL)
    {
        printInOrder( t->Left );
        printf("%s \t %s \t %d \t %s \t %s\n", t->bookName,t->autherName,t->publishingDate,t->publishingAddress,t->category);
        printInOrder( t->Right );
    }
}

void menu(AVLNode tree)
{
    int choice;
    while(2)
    {
        //show Menu on the screen
        printf("============================================================================\n");
        printf("Enter your choice number :-\n");
        printf("1.Read data \n");
        printf("2.Insert a new book to the library\n");
        printf("3.Search for a book \n");
        printf("4.Update/Delete a specific book\n");
        printf("5.List books by category \n");
        printf("6.Height of the tree\n");
        printf("7.save data \n");
        printf("8.Exit \n==> ");
        scanf("%d",&choice);//get choice number from the user

        switch(choice)//shows cases depending on the choice value
        {
        case 1:
        {
            tree= readBooksInformation(tree,1);
            if(tree!=NULL)
            {
                printf("The file has been read \n");
            }
            else
                printf("error !! The list is Empty \n");
        }
        break;
        case 2:
            tree=InsertNewBook(tree);
            break;
        case 3:
            searchForBook(tree);
            break;
        case 4:
        {
            char tempName;
            char bookName[30];
            printf("Enter name of book that you want to delete it \n");
            scanf("%c",&tempName);
            scanf("%[^\n]",bookName);
            tree=updateOrDelete(bookName,tree);
        }
        break;
        case 6:
            printf("Height of the tree : %d\n",Height(tree));
            break;
        case 7:
        {
            FILE*inp;
            inp=fopen("books.txt","w");//open file to write inside it
            saveInFile(tree,inp);
        }
        break;
        case 8 :
            exit(1);
            break;
        case 9:
            printInOrder(tree);
            break;
        default :
            printf("Unknown input !! please enter one of the choices number \n");//if the user enter a number that is not in the menu
        }
    }

}
int main()
{
    AVLNode tree;
    tree = MakeEmpty(NULL);
    menu(tree);
    return 0;
}

